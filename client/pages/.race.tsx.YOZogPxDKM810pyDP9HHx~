import { useState, useEffect } from "react";
import { useLocation } from "wouter";
import { Header } from "@/components/header";
import { Footer } from "@/components/footer";
import { GameModeSelector } from "@/components/game-mode-selector";
import { PlayerStats } from "@/components/player-stats";
import { RaceTrack } from "@/components/ui/race-track";
import { EnhancedTypingInterface } from "@/components/ui/enhanced-typing-interface";
import { PlayersPanel } from "@/components/players-panel";
import { ChickenCustomizer } from "@/components/chicken-customizer";
import { RaceResultsModal } from "@/components/race-results-modal";
import { SubmitPromptModal } from "@/components/submit-prompt-modal";
import { useRace } from "@/hooks/use-race";
import { useWebSocket } from "@/hooks/use-websocket";
import { queryClient } from "@/lib/queryClient";
import { apiRequest } from "@/lib/queryClient";
import { getLevelFromXp } from "@/lib/utils";
import { PixelButton } from "@/components/ui/pixel-button";
import { useToast } from "@/hooks/use-toast";

// Placeholder background options
const RACE_BACKGROUNDS = ["dirt", "grass", "snow", "nether"];

export default function Race() {
  const [, setLocation] = useLocation();
  const [gameMode, setGameMode] = useState("multiplayer");
  const [showCountdown, setShowCountdown] = useState(false);
  const [countdownValue, setCountdownValue] = useState(3);
  const [showResults, setShowResults] = useState(false);
  const [showPromptSubmit, setShowPromptSubmit] = useState(false);
  const [raceBackground, setRaceBackground] = useState(RACE_BACKGROUNDS[0]);
  const [raceTimer, setRaceTimer] = useState<number | null>(null);
  const [guestId, setGuestId] = useState<string | null>(null);
  const [commandInput, setCommandInput] = useState("");
  
  // WebSocket connection
  const { 
    socket,
    connected,
    sendMessage,
    lastMessage
  } = useWebSocket();
  
  // Toast notifications
  const { toast } = useToast();
  
  // Race state
  const {
    playerProfile,
    isRaceActive,
    raceStartTime,
    currentPrompt,
    players,
    playerProgress,
    raceResults,
    updateProgress,
    joinRace,
    leaveRace,
    finishRace,
    resetRace,
    isWinner
  } = useRace(socket);
  
  // Set up guest ID on initial load
  useEffect(() => {
    // Create a guest ID for this session if not logged in
    if (!playerProfile) {
      const guestNumber = Math.floor(1000 + Math.random() * 9000);
      setGuestId(`Guest${guestNumber}`);
    }
  }, [playerProfile]);
  
  // Join multiplayer race on mount
  useEffect(() => {
    if (connected) {
      joinRace('multiplayer');
    }
  }, [connected, joinRace]);
  
  // Handle race timer countdown
  useEffect(() => {
    if (raceTimer === null) return;
    
    const interval = setInterval(() => {
      setRaceTimer(prev => {
        if (prev === null || prev <= 0) {
          clearInterval(interval);
          return 0;
        }
        return prev - 1;
      });
    }, 1000);
    
    // Start race automatically when timer reaches 0
    if (raceTimer === 0 && !isRaceActive && connected) {
      setRaceTimer(null);
      sendMessage("start_race");
    }
    
    return () => clearInterval(interval);
  }, [raceTimer, isRaceActive, connected, sendMessage]);
  
  // Handle race message events
  useEffect(() => {
    if (!lastMessage) return;
    
    try {
      // Handle countdown
      if (lastMessage.type === "countdown_start") {
        setShowCountdown(true);
        setCountdownValue(3);
        
        // Countdown animation
        const interval = setInterval(() => {
          setCountdownValue(prev => {
            if (prev <= 1) {
              clearInterval(interval);
              setShowCountdown(false);
              return 0;
            }
            return prev - 1;
          });
        }, 1000);
        
        return () => clearInterval(interval);
      }
      
      // Handle race end
      if (lastMessage.type === "race_end") {
        setShowResults(true);
        
        // If player is winner, show prompt submission
        if (isWinner) {
          setTimeout(() => {
            setShowPromptSubmit(true);
          }, 1000);
        }
      }
    } catch (error) {
      console.error("Error processing message:", error);
    }
  }, [lastMessage, isWinner]);
  
  // Handle typing complete
  const handleTypingComplete = (stats: { wpm: number; accuracy: number; time: number }) => {
    finishRace(stats);
  };
  
  // Handle leave race
  const handleLeaveRace = () => {
    leaveRace();
    setLocation("/");
  };
  
  // Handle command input change
  const handleCommandChange = (e: React.ChangeEvent<HTMLInputElement>) => {
    setCommandInput(e.target.value);
  };
  
  // Process multiplayer commands
  const handleCommandSubmit = (e: React.FormEvent) => {
    e.preventDefault();
    
    const command = commandInput.trim().toLowerCase();
    processCommand(command);
    setCommandInput("");
  };
  
  // Process a command
  const processCommand = (command: string) => {
    if (command === "/ready") {
      // Generate a new guest ID if needed
      const currentGuestId = guestId || `Guest${Math.floor(1000 + Math.random() * 9000)}`;
      setGuestId(currentGuestId);
      
      // Send ready message with guest ID
      sendMessage({
        type: "player_ready",
        guestId: currentGuestId,
        guestName: currentGuestId
      });
      
      toast({
        title: "Ready!",
        description: "Waiting for other players to join...",
      });
      
      // Start race timer if not already started
      if (raceTimer === null) {
        setRaceTimer(42); // 42-second countdown timer (matches server)
      }
    } 
    else if (command.startsWith("/summon npc_")) {
      const difficulty = command.replace("/summon npc_", "");
      
      if (["peaceful", "easy", "normal", "hard", "insane"].includes(difficulty)) {
        // Send message to add NPC
        sendMessage({
          type: "add_npc",
          difficulty
        });
        
        const difficultyNames: {[key: string]: string} = {
          peaceful: "Rookie",
          easy: "Easy",
          normal: "Average",
          hard: "Expert",
          insane: "Champion"
        };
        
        const diffName = difficultyNames[difficulty] || difficulty;
        
        toast({
          title: `${diffName} NPC added`,
          description: `A ${difficulty} CPU opponent has joined the race.`,
        });
        
        // Start race timer if not already started
        if (raceTimer === null) {
          setRaceTimer(42); // 42-second countdown
        }
      } else {
        toast({
          title: "Invalid difficulty",
          description: "Valid options: peaceful, easy, normal, hard, insane",
          variant: "destructive"
        });
      }
    }
    else if (command === "start_race") {
      sendMessage("start_race");
      setRaceTimer(null);
      
      toast({
        title: "Starting race",
        description: "The race is starting immediately!",
      });
    }
    else {
      toast({
        title: "Unknown command",
        description: "Try /ready or /summon npc_easy",
        variant: "destructive"
      });
    }
  };
  
  // Handle prompt submission
  const handlePromptSubmit = async (prompt: string) => {
    setShowPromptSubmit(false);
    
    try {
      await apiRequest("POST", "/api/prompts", { text: prompt });
      
      // Invalidate prompt cache
      queryClient.invalidateQueries({ queryKey: ["/api/prompts"] });
    } catch (error) {
      console.error("Failed to submit prompt:", error);
    }
  };
  
  // Handle customization save
  const handleCustomizationSave = async (customization: { 
    chickenType: string; 
    jockeyType: string; 
    trailType: string;
    chickenName: string; 
  }) => {
    try {
      await apiRequest("PATCH", "/api/profile/customization", customization);
      
      // Invalidate profile cache
      queryClient.invalidateQueries({ queryKey: ["/api/profile"] });
    } catch (error) {
      console.error("Failed to save customization:", error);
    }
  };
  
  // Extract player level and XP progress
  const { level, progress } = getLevelFromXp(playerProfile?.xp || 0);

  return (
    <div className="flex flex-col min-h-screen">
      <Header />
      
      <main className="flex-grow container mx-auto p-4 flex flex-col lg:flex-row gap-4">
        {/* Left sidebar - Game modes & stats */}
        <div className="lg:w-1/4 space-y-4">
          <GameModeSelector 
            selectedMode={gameMode}
            onModeSelect={setGameMode}
          />
          
          <PlayerStats
            level={level}
            xpProgress={progress}
            racesWon={playerProfile?.racesWon || 0}
            avgWpm={playerProfile?.avgWpm || 0}
            accuracy={playerProfile?.accuracy || 0}
            promptsAdded={playerProfile?.promptsAdded || 0}
          />
        </div>

        {/* Main game area */}
        <div className="lg:w-2/4 flex flex-col space-y-4">
          {/* Race track - always shown */}
          <RaceTrack 
            players={players.map(p => ({
              id: p.id,
              username: p.username,
              progress: p.progress,
              chickenType: p.chickenType || "white",
              jockeyType: p.jockeyType || "steve",
              color: p.color,
              isCurrentPlayer: p.isCurrentPlayer
            }))}
            raceFinished={showResults}
            backgroundType={raceBackground}
          />
          
          {isRaceActive ? (
            /* Typing interface shown only during active race */
            <EnhancedTypingInterface
              prompt={currentPrompt}
              onProgress={updateProgress}
              onComplete={handleTypingComplete}
              isRaceActive={isRaceActive}
              raceStartTime={raceStartTime}
            />
          ) : (
            /* Race controls shown when waiting for race */
            <div className="bg-dark minecraft-border p-4">
              <h2 className="font-minecraft text-center text-xl text-white mb-2">
                MULTIPLAYER RACE
              </h2>
              
              <p className="text-center text-blue-400 mb-4">
                {showCountdown ? "Countdown active!" :
                 raceTimer ? `Race starting in ${raceTimer}s...` :
                 connected ? `Waiting for players (${players.length}/8)` :
                 "Connecting to server..."}
              </p>
              
              {/* Command input */}
              <form onSubmit={handleCommandSubmit} className="mb-4">
                <div className="flex">
                  <input
                    type="text"
                    value={commandInput}
                    onChange={handleCommandChange}
                    placeholder="Type /ready to start racing"
                    className="flex-grow px-3 py-2 rounded-l bg-black/30 border border-primary text-white font-mono"
                  />
                  <PixelButton type="submit" className="rounded-l-none">
                    SEND
                  </PixelButton>
                </div>
                <div className="text-xs text-gray-500 mt-1 flex flex-wrap">
                  <span className="mr-2 mb-1"><span className="text-primary">/ready</span> → claim a slot</span>
                  <span className="mr-2 mb-1"><span className="text-primary">/summon npc_peaceful</span> → add peaceful NPC</span>
                  <span className="mr-2 mb-1"><span className="text-primary">/summon npc_easy</span> → add easy NPC</span>
                  <span className="mr-2 mb-1"><span className="text-primary">/summon npc_normal</span> → add normal NPC</span>
                  <span className="mr-2 mb-1"><span className="text-primary">/summon npc_hard</span> → add hard NPC</span>
                </div>
              </form>
              
              {/* Quick command buttons */}
              <div className="grid grid-cols-3 gap-2 mb-4">
                <PixelButton onClick={() => processCommand("/ready")} size="sm">
                  JOIN RACE
                </PixelButton>
                <PixelButton onClick={() => processCommand("/summon npc_peaceful")} size="sm" variant="secondary">
                  ADD ROOKIE
                </PixelButton>
                <PixelButton onClick={() => processCommand("/summon npc_easy")} size="sm" variant="secondary">
                  ADD EASY
                </PixelButton>
                <PixelButton onClick={() => processCommand("/summon npc_normal")} size="sm" variant="secondary">
                  ADD NORMAL
                </PixelButton>
                <PixelButton onClick={() => processCommand("/summon npc_hard")} size="sm" variant="destructive">
                  ADD HARD
                </PixelButton>
                <PixelButton onClick={() => processCommand("/summon npc_insane")} size="sm" variant="destructive">
                  ADD INSANE
                </PixelButton>
              </div>
              
              {/* Start race now button (if timer is running) */}
              {raceTimer !== null && (
                <div className="text-center mb-4">
                  <PixelButton onClick={() => processCommand("start_race")} variant="outline">
                    START NOW
                  </PixelButton>
                </div>
              )}
              
              <div className="text-center">
                <PixelButton 
                  onClick={handleLeaveRace}
                  variant="destructive"
                >
                  LEAVE RACE
                </PixelButton>
              </div>
            </div>
          )}
          
          {/* Countdown animation for active racing */}
          {showCountdown && isRaceActive && (
            <div className="font-minecraft text-4xl text-center text-yellow-400 animate-bounce-slow">
              RACE STARTS IN: {countdownValue}
            </div>
          )}
        </div>

        {/* Right sidebar - Players & customization */}
        <div className="lg:w-1/4 space-y-4">
          <PlayersPanel 
            players={players.map(p => ({
              id: p.id,
              username: p.username,
              level: p.level,
              wpm: p.wpm,
              status: p.status,
              isCurrentPlayer: p.isCurrentPlayer,
              isNPC: p.id.startsWith('npc_') // Mark NPCs based on their ID prefix
            }))} 
            maxPlayers={8} 
          />
          
          {playerProfile && !isRaceActive && (
            <ChickenCustomizer
              chickenName={playerProfile.chickenName}
              selectedChicken={playerProfile.chickenType}
              selectedJockey={playerProfile.jockeyType}
              selectedTrail={playerProfile.trailType || "none"}
              chickenOptions={[
                // Original chicken types
                { id: "white", name: "White Leghorn" },
                { id: "brown", name: "Rhode Island Red", requiredLevel: 2 },
                { id: "black", name: "Australorp", requiredLevel: 3 },
                { id: "gold", name: "Golden Comet", requiredLevel: 5 },
                { id: "diamond", name: "Diamond Leghorn", requiredLevel: 10, locked: true },
                
                // New specialized racer sprites
                { id: "racer01", name: "Dark Feathers", requiredLevel: 0 },
                { id: "racer02", name: "Snow Rider", requiredLevel: 2 },
                { id: "racer03", name: "Blue Streak", requiredLevel: 3 },
                { id: "racer04", name: "Emerald Speed", requiredLevel: 4 },
                { id: "racer05", name: "Golden Flash", requiredLevel: 5 },
                { id: "racer06", name: "Mystic Blaze", requiredLevel: 6, locked: true },
                { id: "racer07", name: "Azure Detective", requiredLevel: 7, locked: true },
                { id: "racer08", name: "Silver Scholar", requiredLevel: 8, locked: true },
                { id: "racer09", name: "Amber Swift", requiredLevel: 9, locked: true },
                { id: "racer10", name: "Forest Runner", requiredLevel: 10, locked: true }
              ]}
              jockeyOptions={[
                { id: "steve", name: "Steve" },
                { id: "alex", name: "Alex", requiredLevel: 2 },
                { id: "zombie", name: "Zombie", requiredLevel: 4 },
                { id: "villager", name: "Villager", requiredLevel: 6 },
                { id: "enderman", name: "Enderman", requiredLevel: 8, locked: true }
              ]}
              trailOptions={[
                { id: "none", name: "None" },
                { id: "dust", name: "Dust Trail", requiredLevel: 3 },
                { id: "flames", name: "Flames", requiredLevel: 5 },
                { id: "hearts", name: "Hearts", requiredLevel: 7 },
                { id: "rainbow", name: "Rainbow", requiredLevel: 10, locked: true }
              ]}
              playerLevel={level}
              onSave={handleCustomizationSave}
            />
          )}
        </div>
      </main>
      
      {/* Race results modal */}
      {showResults && (
        <RaceResultsModal
          isOpen={showResults}
          results={raceResults.map(r => ({
            id: r.id,
            username: r.username,
            position: r.position,
            wpm: r.wpm,
            accuracy: r.accuracy,
            isCurrentPlayer: r.isCurrentPlayer,
            xpGained: r.xpGained
          }))}
          onClose={() => {
            setShowResults(false);
            resetRace();
          }}
          onRaceAgain={() => {
            setShowResults(false);
            resetRace();
            joinRace('multiplayer');
          }}
          onLeave={() => {
            setShowResults(false);
            resetRace();
            setLocation("/");
          }}
        />
      )}
      
      {/* Prompt submission modal */}
      {showPromptSubmit && (
        <SubmitPromptModal
          isOpen={showPromptSubmit}
          onSubmit={handlePromptSubmit}
          onClose={() => setShowPromptSubmit(false)}
        />
      )}
      
      <Footer />
    </div>
  );
}